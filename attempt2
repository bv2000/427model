# Bhamini Code
# 427 - Group Model - Siegel
# Climate Change, Economic Inequality, and Health Outcomes

import math
import random
from typing import final

import numpy as np
from scipy.stats import skewnorm
from os.path import exists

def addInitialNodes(multiplier,suscmean,suscstdev, N): 		#Initialize Population

	#lists of agents
    agentList = list()      #List of all people
    mov1List = list()   	#List of people who should move/can move/want to move; outcome: move
    mov2List = list()		#List of people wo should move/can't move; outcome: don't move
    mov3List = list()       #List of people who should move/can move/don't want move; outcome: don't move
    mov4List = list()       #List of people who can move and have weirdly high pref to move; outcome: move
    mov5List = list()       #List of people who dont need to move (susc is low); outcome: don't move
    # combine to make other relevant lists 
    # highsusc =  mov1+mov2
    # movedlist = mov1, mov4
    # staylist = mov2, mov3, mov5
    # maybe a separate list of mobility? but not sure what that would even be useful for
    
	#Create list of individuals
    personcounter=0 		#counter for setting personNum
    #Create lists
    while personcounter<N:
        #Set node properties
        #A node is a list of properties: personcounter, susc, mob, mov, regionAndClimate, prefmove, finloc, newlocdeterminant
        finloc=0 #where each person ends up (can be same as original location)
        newlocdeterminant=0 #random number that determines where person who moves ends up; irrelevant for those who don't move
        if personcounter<N/4:
            regionAndClimate =0 #urbanhot
            skewness = 5 #Negative values are left skewed, positive values are right skewed.
        elif personcounter<N/2:
            regionAndClimate = 1 #urbancold
            skewness = 5
        elif personcounter<3*N/4:
            regionAndClimate = 2 #ruralhot
            skewness = 2
        else:
            regionAndClimate = 3 #ruralcold
            skewness = 2
        skewness = skewness * multiplier 
        susc=np.random.normal(loc=suscmean, scale=suscstdev) #set susc of person, mean = 0.5, stdev = 0.15
        numValues = N/4
        random = skewnorm.rvs(a = skewness,loc=1, size=int(numValues))  #Skewnorm function

        random = random - min(random)      #Shift the set so the minimum value is equal to zero.
        random = random / max(random)      #Standadize all the vlues between 0 and 1. 
        mob = random[0]

        mov=0

        prefmove = np.random.normal(loc=0.5, scale=0.2) #assigns individuals preference to move
        node = [personcounter, susc, mob, mov, regionAndClimate, prefmove, finloc, newlocdeterminant]
        if susc>0.8 and mob>0.7 and prefmove>0.5:
            mov=1 #should move/can move/want to move = you move
            mov1List.append(node)
        elif susc>0.8  and  mob<=0.7:
            mov = 2 #should move/can't move = you don't move
            mov2List.append(node)
        elif susc>0.8 and mob>0.7 and prefmove<=0.5:
            mov = 3 #should move/can move/don't want move = you don't move
            mov3List.append(node)
        elif mob>0.7 and prefmove>0.9: #is there an automatic assumption here that susc is low
            mov = 4 #can move and have weirdly high pref/propensity to move = you mov
            mov4List.append(node)
        else: 
            mov = 5 #dont need to move (susc is low) = don't move
            mov5List.append(node)
        #add to lists
        agentList.append(node)
    ogAgentList=agentList
    return [[agentList,mov1List,mov2List, mov3List, mov4List, mov5List, ogAgentList]]

def modifySusceptibilityBeforeMoveDecision(tempchange, agentList): #limit temp change 0-1 degrees in input file?
    for x in agentList:
        regionAndClimate = x[4]
        if regionAndClimate == 0:
            x[1] = x[1]*(1+(tempchange/6))
        elif regionAndClimate == 1:
            x[1] = x[1]*(1+(tempchange/4))
        elif regionAndClimate == 2:
            x[1] = x[1]*(1+(tempchange/14))
        elif regionAndClimate == 3:
            x[1] = x[1]*(1+(tempchange/12))
    return agentList  

def moveOrNotMoveAndEffects(agentList, mov1List, mov2List, mov3List, mov4List, mov5List):
    for x in agentList: 
        mob = x[2]
        susc = x[1]
        prefmove = x[5]
        if susc>0.8 and mob>0.7 and prefmove>0.5:
            x[3]=1 #should move/can move/want to move = you move
        elif susc>0.8  and  mob<=0.7:
            x[3] = 2 #should move/can't move = you don't move
        elif susc>0.8 and mob>0.7 and prefmove<=0.5:
            x[3] = 3 #should move/can move/don't want move = you don't move
        elif mob>0.7 and prefmove>0.9: 
            x[3] = 4 #can move and have weirdly high pref to move = you mov
        else: 
            x[3] = 5 #dont need to move (susc is low) = don't move
        return agentList
    for x in mov1List:
        regionAndClimate = x[4]
        susc = x[1]
        mob = x[2]
        prefmove = x[5]
        newlocdeterminant= x[7]
        if regionAndClimate==0: #urbanhot; better: rural hot rural cold
            newlocdeterminant = (random.random())
            if newlocdeterminant <0.45: 
                x[6] = 2 #ruralhot
            if 0.45 <= newlocdeterminant <0.9:
                x[6] = 3 #ruralcold
            if 0.9 <= newlocdeterminant <=1:
                x[6] = 1 #urbancold
        if regionAndClimate==1: #urbancold; all are better
            newlocdeterminant = (random.random())
            if newlocdeterminant <0.4:
                x[6] = 0 #urbanhot
            if 0.4 <= newlocdeterminant <0.7:
                x[6] = 2 #ruralhot
            if 0.7 <= newlocdeterminant <=1:
                x[6] = 3 #ruralcold
        if regionAndClimate==2: #ruralhot; best option (move to another ruralhot?)
            newlocdeterminant = (random.random())
            if newlocdeterminant <0.85:
                x[6] = 2 #ruralhot
            if 0.85 <= newlocdeterminant <0.9:
                x[6] = 0 #urbanhot
            if 0.9 <= newlocdeterminant <0.95:
                x[6] = 1 #urbancold
            if 0.95 <= newlocdeterminant <=1:
                x[6] = 3 #ruralcold
        if regionAndClimate==3: #ruralcold; better: rural hot
            newlocdeterminant = (random.random())
            if newlocdeterminant <0.75:
                x[6] = 2 #ruralhot
            if 0.75 <= newlocdeterminant <0.85:
                x[6] = 0 #urbanhot
            if 0.85 <= newlocdeterminant <0.95:
                x[6] = 1 #urbancold
            if 0.95 <= newlocdeterminant <=1:
                x[6] = 3 #ruralcold 
        return mov1List
    for x in mov2List: 
        regionAndClimate = x[4]
        susc = x[1]
        mob = x[2]
        prefmove = x[5]
        x[6] = x[6]
        if regionAndClimate==0: 
            x[6] = 0
        if regionAndClimate==1: 
            x[6] = 1
        if regionAndClimate==2:
            x[6] = 2
        if regionAndClimate==3: 
            x[6] = 3
        return mov2List
    for x in mov3List: 
        regionAndClimate = x[4]
        susc = x[1]
        mob = x[2]
        prefmove = x[5]
        if regionAndClimate==0: 
            x[6] = 0
        if regionAndClimate==1: 
            x[6] = 1
        if regionAndClimate==2:
            x[6] = 2
        if regionAndClimate==3: 
            x[6] = 3
        return mov3List
    for x in mov4List:
        regionAndClimate = x[4]
        susc = x[1]
        mob = x[2]
        prefmove = x[5]
        if regionAndClimate==0: #urbanhot
            newlocdeterminant = (random.random())
            if newlocdeterminant <0.33: 
                x[6] = 2 #ruralhot
            if 0.33 <= newlocdeterminant <0.67:
                x[6] = 3 #ruralcold
            if 0.67 <= newlocdeterminant <=1:
                x[6] = 1 #urbancold
        if regionAndClimate==1: #urbancold
            newlocdeterminant = (random.random())
            if newlocdeterminant <0.33: 
                x[6] = 0 #urbanhot
            if 0.33 <= newlocdeterminant <0.67:
                x[6] = 2 #ruralhot
            if 0.67 <= newlocdeterminant <=1:
                x[6] = 3 #ruralcold
        if regionAndClimate==2: #ruralhot
            newlocdeterminant = (random.random())
            if newlocdeterminant <0.33: 
                x[6] = 3 #ruralcold
            if 0.33 <= newlocdeterminant <0.67:
                x[6] = 0 #urbanhot
            if 0.67 <= newlocdeterminant <=1:
                x[6] = 1 #urbancold
        if regionAndClimate==3: #ruralcold
            newlocdeterminant = (random.random())
            if newlocdeterminant <0.33: 
                x[6] = 2 #ruralhot
            if 0.33 <= newlocdeterminant <0.67:
                x[6] = 0 #urbanhot
            if 0.67 <= newlocdeterminant <=1:
                x[6] = 1 #urbancold
        return mov4List
    for x in mov5List:
        regionAndClimate = x[4]
        susc = x[1]
        mob = x[2]
        prefmove = x[5]
        if regionAndClimate==0: 
            x[6] = 0
        if regionAndClimate==1: 
            x[6] = 1
        if regionAndClimate==2:
            x[6] = 2
        if regionAndClimate==3: 
            x[6] = 3
        return mov5List

if __name__ == "__main__":
    if __name__ == "__main__":
    [agentList,mov1List,mov2List, mov3List, mov4List, mov5List, ogAgentList] = addInitialNodes(0.2,0.5,0.15,12)
    print(ogAgentList)
    newAgentList = modifySusceptibilityBeforeMoveDecision(0.2, agentList)
    print(newAgentList)
    finalList = moveOrNotMoveAndEffects(agentList, mov1List, mov2List, mov3List, mov4List, mov5List)
    print(finalList)
